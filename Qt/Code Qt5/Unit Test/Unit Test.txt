### Test

Chạy test với Qt: Ta có thể viết 1 unit test cơ bản với qt. 
Thủ công:Tạo file .h và file .cpp chứa cái hàm của ta, hàm đó là test case->include <QtTest>-> sau đó ta dùng hàm cần kiểm tra trong test case-> thêm QTEST_MAIN(tên class test) ở cuối cpp->vào file pro thêm QT+=testlib->run phát là xong.
=>lưu ý: namespace QTest cung cho ta rất nhiều hàm và marco để phục vụ cho vc test như QVERIFY(condition), QCOMPARE(actual,expected),.. và =>QTEST_MAIN cx là marco. Để dùng ta include <QtTest> đã là có mọi module của Qt để test r. 
marco QTEST_MAIN sẽ thay thế hàm main nên ở TH trên chỉ cần có file cpp và h mà k có hàm main()->thật ra bên trong marco này cũng chỉ gọi hàm main và rất nhiều hàm/marco kiểm tra, init,.. cuối cùng thì invoke cái method của ta và cleanup.
Tuy nhiên cũng như nhiều IDE khác luôn hỗ trợ unit test. Để dùng trong Qt, tạo project auto test project->kết quả cũng sẽ cho tương tự nhưng lại chỉ tạo ra 1 file cpp với definition chung với declaration-> marco QTEST_APPLESS_MAIN lúc này thay thế QTEST_MAIN tương tự->nhưng ta lại phải include mocfile của cái class của ta.
moc file(meta-object compiler): mỗi class có 1 moc file như v ta có thể generate ra trong qt bằng qt commandprompt->cd vào thư mục bin của mingw của qt->(copy dự án vào ổ C từ trc vì nó k vô đc ổ B)->moc.exe "<link file chứa class>" > "<link file.moc muốn tạo ra>"->sau đó ta dùng file.moc như thế nào tùy ý. Ta cx có thể tạo file.moc bằng makefile có rule là foo.o:foo.moc và foo.moc:...<tạo ra từ đâu>.
moc file dùng cho các class kế thừa từ QObject.
có thể k dùng file.moc mà dùng .cpp cx đc vd: mocfile.cpp. Tại sao lại dùng moc file->điểm lợi của nó khá dài và chưa đi sâu
=>kết quả trả về sau khi chạy là kiểu liệt kê ra hàm nào PASS, hàm nào bị FAIL.

Có thể thêm CONFIG += testcase vào pro sẽ dùng make check để run hoặc CONFIG += no_testcase_installs sẽ cản nó install vào TARGET
Hay hơn là chạy test trên Qt cmd: <tên file exe> <tên hàm cần test> <variable>

Các hàm khác của Qt cmd: qmake -project "<nội dung thêm vào file pro, vd: CONFIG+=release>" sẽ tự động thêm nội dung vào file pro

Tự viết unit test theo như chuẩn thủ công: 
ví dụ ta có hàm test case nhận đối số vào->ta có 10 TH(bao cả các TH đặc biệt như "", null,..) cần kiểm tra và nếu cho ra kq đúng thì hàm mới đc công nhận là đung: 
Ta viết hàm gọi hàm test case và truyền vào cả 10 đối số, và kiểm tra như mong đợi thì passed, còn k như mong đợi thì in ra kiểu: failed on input=<input> expected <expected>, but got <testcase(input)>;

Có framework TUG chuyên để test phần mềm qt, ví dụ khi dùng TUG để test 1 hàm nó sẽ tự nảy số liên tục và cho ra TH fail thay vì ta gõ từng TH. Cũng có những test automation framework để test tự động khi thay đổi code.

Data Driven Test: Ví dụ khi test ta cứ kiểu gõ từng cái 1 xong Th nào fail thì in ra cái gì, Th nào tốt thì in ra cái gì(test cả TH lỗi thì in lỗi có chuẩn k) mà chỉ phụ thuộc vào data khác nhau. Như v ở PP này, ta k nên copy paste hay test từng cái 1 mà nên nhét tất cả vào 1 file or kiểu bảng table xong lưu lại các data đó trong hàm dưới dạng parameter và thay vào là xong.
Ta có thể thực hiện Data Test Driven trong Qt bằng các marco khác của QTest chứ k nên QCOMPARE liên tục. 

